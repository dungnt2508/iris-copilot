version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg16
    container_name: iris_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: iris_v2
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iris_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: iris_redis
    command: redis-server --appendonly yes --requirepass ""
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iris_network

  # Backend API (Development mode with hot reload)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: iris_backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./app:/app/app
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/iris_v2
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - iris_network

  # Copilot Plugin API
  plugin:
    build:
      context: ./copilot-plugin
      dockerfile: Dockerfile
    container_name: iris_copilot_plugin
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - IRIS_API_URL=http://backend:8000
      - IRIS_API_BASE_URL=http://backend:8000/api/v1
    depends_on:
      - backend
    networks:
      - iris_network

  # pgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: iris_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@iris.ai
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - iris_network
    profiles:
      - tools

  # RedisInsight (Optional - for Redis management)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: iris_redis_insight
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    depends_on:
      - redis
    networks:
      - iris_network
    profiles:
      - tools

networks:
  iris_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  redis_insight_data: